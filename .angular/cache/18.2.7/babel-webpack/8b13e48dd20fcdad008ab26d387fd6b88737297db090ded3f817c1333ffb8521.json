{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    http;\n    baseUrl = 'http://localhost:3000/api/messages';\n    baseBookUrl = 'http://localhost:3000/api/bookings';\n    constructor(http) {\n      this.http = http;\n    }\n    fetchNotificationMessage(user_id) {\n      const token = localStorage.getItem('token');\n      return this.http.post(`${this.baseUrl}/notificaciones-mensajes-recibidos`, {\n        \"receiver_user_id\": user_id\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n    fetchNotificationBooking(user_id) {\n      const token = localStorage.getItem('token');\n      return this.http.post(`${this.baseBookUrl}/mensaje-estado-reserva-dueno`, {\n        \"user_id\": user_id\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n    // Método para obtener todas las notificaciones del backend\n    fetchNotifications() {\n      return this.http.get(`${this.baseUrl}/notificaciones-mensajes-recibidos`).pipe(map(data => {\n        return data.map(notification => ({\n          receiver_user_id: notification.receiver_user_id,\n          sender_user_id: notification.sender_user_id,\n          message: `Mensaje de usuario ${notification.sender_user_id}`,\n          timestamp: new Date()\n        }));\n      }));\n    }\n    // Método para agregar una nueva notificación\n    addNotification(notificationData) {\n      const notifications = JSON.parse(localStorage.getItem('notifications') || '[]');\n      notifications.push(notificationData);\n      localStorage.setItem('notifications', JSON.stringify(notifications));\n    }\n    // Método para obtener todas las notificaciones del localStorage\n    getNotifications() {\n      return JSON.parse(localStorage.getItem('notifications') || '[]');\n    }\n    static ɵfac = function NotificationService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NotificationService;\n})();","map":{"version":3,"names":["map","NotificationService","http","baseUrl","baseBookUrl","constructor","fetchNotificationMessage","user_id","token","localStorage","getItem","post","headers","fetchNotificationBooking","fetchNotifications","get","pipe","data","notification","receiver_user_id","sender_user_id","message","timestamp","Date","addNotification","notificationData","notifications","JSON","parse","push","setItem","stringify","getNotifications","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Nereida Ramos\\Downloads\\tercera_entrega_front\\src\\app\\services\\supabase\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators'; \r\n\r\nexport interface Notification {\r\n  receiver_user_id: number;\r\n  sender_user_id: number;\r\n  message?: string;  \r\n  timestamp?: Date;  \r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private baseUrl = 'http://localhost:3000/api/messages'; \r\n  private baseBookUrl = 'http://localhost:3000/api/bookings'; \r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  fetchNotificationMessage(user_id: number): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    return this.http.post(`${this.baseUrl}/notificaciones-mensajes-recibidos`, {\"receiver_user_id\":user_id}, {headers: {'Authorization': `Bearer ${token}`}});\r\n  }\r\n\r\n  fetchNotificationBooking(user_id: number): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    return this.http.post(`${this.baseBookUrl}/mensaje-estado-reserva-dueno`, {\"user_id\":user_id}, {headers: {'Authorization': `Bearer ${token}`}});\r\n  }\r\n\r\n  // Método para obtener todas las notificaciones del backend\r\n  fetchNotifications(): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(`${this.baseUrl}/notificaciones-mensajes-recibidos`).pipe(\r\n      map((data: any[]) => {\r\n        return data.map(notification => ({\r\n          receiver_user_id: notification.receiver_user_id,\r\n          sender_user_id: notification.sender_user_id,\r\n          message: `Mensaje de usuario ${notification.sender_user_id}`,  \r\n          timestamp: new Date()  \r\n        }));\r\n      })\r\n    );\r\n  }\r\n\r\n  // Método para agregar una nueva notificación\r\n  addNotification(notificationData: Notification): void {\r\n    const notifications = JSON.parse(localStorage.getItem('notifications') || '[]');\r\n    notifications.push(notificationData);\r\n    localStorage.setItem('notifications', JSON.stringify(notifications));\r\n  }\r\n\r\n  // Método para obtener todas las notificaciones del localStorage\r\n  getNotifications(): Notification[] {\r\n    return JSON.parse(localStorage.getItem('notifications') || '[]');\r\n  }\r\n\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAYpC,WAAaC,mBAAmB;EAA1B,MAAOA,mBAAmB;IAIVC,IAAA;IAHZC,OAAO,GAAG,oCAAoC;IAC9CC,WAAW,GAAG,oCAAoC;IAE1DC,YAAoBH,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvCI,wBAAwBA,CAACC,OAAe;MACtC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACR,OAAO,oCAAoC,EAAE;QAAC,kBAAkB,EAACI;MAAO,CAAC,EAAE;QAACK,OAAO,EAAE;UAAC,eAAe,EAAE,UAAUJ,KAAK;QAAE;MAAC,CAAC,CAAC;IAC3J;IAEAK,wBAAwBA,CAACN,OAAe;MACtC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACP,WAAW,+BAA+B,EAAE;QAAC,SAAS,EAACG;MAAO,CAAC,EAAE;QAACK,OAAO,EAAE;UAAC,eAAe,EAAE,UAAUJ,KAAK;QAAE;MAAC,CAAC,CAAC;IACjJ;IAEA;IACAM,kBAAkBA,CAAA;MAChB,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAiB,GAAG,IAAI,CAACZ,OAAO,oCAAoC,CAAC,CAACa,IAAI,CAC5FhB,GAAG,CAAEiB,IAAW,IAAI;QAClB,OAAOA,IAAI,CAACjB,GAAG,CAACkB,YAAY,KAAK;UAC/BC,gBAAgB,EAAED,YAAY,CAACC,gBAAgB;UAC/CC,cAAc,EAAEF,YAAY,CAACE,cAAc;UAC3CC,OAAO,EAAE,sBAAsBH,YAAY,CAACE,cAAc,EAAE;UAC5DE,SAAS,EAAE,IAAIC,IAAI;SACpB,CAAC,CAAC;MACL,CAAC,CAAC,CACH;IACH;IAEA;IACAC,eAAeA,CAACC,gBAA8B;MAC5C,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACnB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC;MAC/EgB,aAAa,CAACG,IAAI,CAACJ,gBAAgB,CAAC;MACpChB,YAAY,CAACqB,OAAO,CAAC,eAAe,EAAEH,IAAI,CAACI,SAAS,CAACL,aAAa,CAAC,CAAC;IACtE;IAEA;IACAM,gBAAgBA,CAAA;MACd,OAAOL,IAAI,CAACC,KAAK,CAACnB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC;IAClE;;uCAxCWT,mBAAmB,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAnBnC,mBAAmB;MAAAoC,OAAA,EAAnBpC,mBAAmB,CAAAqC,IAAA;MAAAC,UAAA,EAFlB;IAAM;;SAEPtC,mBAAmB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}