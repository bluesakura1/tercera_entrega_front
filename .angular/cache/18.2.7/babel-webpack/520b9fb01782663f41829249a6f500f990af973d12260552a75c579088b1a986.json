{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Nereida Ramos/Downloads/tercera_entrega_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nimport { httpEndpointURL } from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = /*#__PURE__*/function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n  return REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n}(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || {});\nexport var REALTIME_LISTEN_TYPES = /*#__PURE__*/function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n  /**\n   * listen to Postgres changes.\n   */\n  REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n  return REALTIME_LISTEN_TYPES;\n}(REALTIME_LISTEN_TYPES || {});\nexport var REALTIME_SUBSCRIBE_STATES = /*#__PURE__*/function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n  return REALTIME_SUBSCRIBE_STATES;\n}(REALTIME_SUBSCRIBE_STATES || {});\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES;\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nclass RealtimeChannel {\n  constructor( /** Topic name can be any string. */\n  topic, params = {\n    config: {}\n  }, socket) {\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.subTopic = topic.replace(/^realtime:/i, '');\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: ''\n      },\n      private: false\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this._onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket._remove(this);\n    });\n    this._onError(reason => {\n      if (this._isLeaving() || this._isClosed()) {\n        return;\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return;\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n      this._trigger(this._replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint) + '/api/broadcast';\n  }\n  /** Subscribe registers your client with the server */\n  subscribe(callback, timeout = this.timeout) {\n    var _a, _b;\n    if (!this.socket.isConnected()) {\n      this.socket.connect();\n    }\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n    } else {\n      const {\n        config: {\n          broadcast,\n          presence,\n          private: isPrivate\n        }\n      } = this.params;\n      this._onError(e => callback && callback('CHANNEL_ERROR', e));\n      this._onClose(() => callback && callback('CLOSED'));\n      const accessTokenPayload = {};\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(r => r.filter)) !== null && _b !== void 0 ? _b : [],\n        private: isPrivate\n      };\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken;\n      }\n      this.updateJoinPayload(Object.assign({\n        config\n      }, accessTokenPayload));\n      this.joinedOnce = true;\n      this._rejoin(timeout);\n      this.joinPush.receive('ok', ({\n        postgres_changes: serverPostgresFilters\n      }) => {\n        var _a;\n        this.socket.accessToken && this.socket.setAuth(this.socket.accessToken);\n        if (serverPostgresFilters === undefined) {\n          callback && callback('SUBSCRIBED');\n          return;\n        } else {\n          const clientPostgresBindings = this.bindings.postgres_changes;\n          const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n          const newPostgresBindings = [];\n          for (let i = 0; i < bindingsLen; i++) {\n            const clientPostgresBinding = clientPostgresBindings[i];\n            const {\n              filter: {\n                event,\n                schema,\n                table,\n                filter\n              }\n            } = clientPostgresBinding;\n            const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                id: serverPostgresFilter.id\n              }));\n            } else {\n              this.unsubscribe();\n              callback && callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n              return;\n            }\n          }\n          this.bindings.postgres_changes = newPostgresBindings;\n          callback && callback('SUBSCRIBED');\n          return;\n        }\n      }).receive('error', error => {\n        callback && callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n        return;\n      }).receive('timeout', () => {\n        callback && callback('TIMED_OUT');\n        return;\n      });\n    }\n    return this;\n  }\n  presenceState() {\n    return this.presence.state;\n  }\n  track(payload, opts = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield _this.send({\n        type: 'presence',\n        event: 'track',\n        payload\n      }, opts.timeout || _this.timeout);\n    })();\n  }\n  untrack(opts = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this2.send({\n        type: 'presence',\n        event: 'untrack'\n      }, opts);\n    })();\n  }\n  on(type, filter, callback) {\n    return this._on(type, filter, callback);\n  }\n  /**\n   * Sends a message into the channel.\n   *\n   * @param args Arguments to send to channel\n   * @param args.type The type of event to send\n   * @param args.event The name of the event being sent\n   * @param args.payload Payload to be sent\n   * @param opts Options to be used during the send process\n   */\n  send(args, opts = {}) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n      if (!_this3._canPush() && args.type === 'broadcast') {\n        const {\n          event,\n          payload: endpoint_payload\n        } = args;\n        const options = {\n          method: 'POST',\n          headers: {\n            Authorization: _this3.socket.accessToken ? `Bearer ${_this3.socket.accessToken}` : '',\n            apikey: _this3.socket.apiKey ? _this3.socket.apiKey : '',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            messages: [{\n              topic: _this3.subTopic,\n              event,\n              payload: endpoint_payload\n            }]\n          })\n        };\n        try {\n          const response = yield _this3._fetchWithTimeout(_this3.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : _this3.timeout);\n          yield (_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel();\n          return response.ok ? 'ok' : 'error';\n        } catch (error) {\n          if (error.name === 'AbortError') {\n            return 'timed out';\n          } else {\n            return 'error';\n          }\n        }\n      } else {\n        return new Promise(resolve => {\n          var _a, _b, _c;\n          const push = _this3._push(args.type, args, opts.timeout || _this3.timeout);\n          if (args.type === 'broadcast' && !((_c = (_b = (_a = _this3.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n            resolve('ok');\n          }\n          push.receive('ok', () => resolve('ok'));\n          push.receive('error', () => resolve('error'));\n          push.receive('timeout', () => resolve('timed out'));\n        });\n      }\n    })();\n  }\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout) {\n    this.state = CHANNEL_STATES.leaving;\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n    };\n    this.rejoinTimer.reset();\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy();\n    return new Promise(resolve => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive('ok', () => {\n        onClose();\n        resolve('ok');\n      }).receive('timeout', () => {\n        onClose();\n        resolve('timed out');\n      }).receive('error', () => {\n        resolve('error');\n      });\n      leavePush.send();\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {});\n      }\n    });\n  }\n  /** @internal */\n  _fetchWithTimeout(url, options, timeout) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const controller = new AbortController();\n      const id = setTimeout(() => controller.abort(), timeout);\n      const response = yield _this4.socket.fetch(url, Object.assign(Object.assign({}, options), {\n        signal: controller.signal\n      }));\n      clearTimeout(id);\n      return response;\n    })();\n  }\n  /** @internal */\n  _push(event, payload, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n    let pushEvent = new Push(this, event, payload, timeout);\n    if (this._canPush()) {\n      pushEvent.send();\n    } else {\n      pushEvent.startTimeout();\n      this.pushBuffer.push(pushEvent);\n    }\n    return pushEvent;\n  }\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event, payload, _ref) {\n    return payload;\n  }\n  /** @internal */\n  _isMember(topic) {\n    return this.topic === topic;\n  }\n  /** @internal */\n  _joinRef() {\n    return this.joinPush.ref;\n  }\n  /** @internal */\n  _trigger(type, payload, ref) {\n    var _a, _b;\n    const typeLower = type.toLocaleLowerCase();\n    const {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    const events = [close, error, leave, join];\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return;\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref);\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(bind => {\n        var _a, _b, _c;\n        return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n      }).map(bind => bind.callback(handledPayload, ref));\n    } else {\n      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(bind => {\n        var _a, _b, _c, _d, _e, _f;\n        if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n          if ('id' in bind) {\n            const bindId = bind.id;\n            const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n            return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n          } else {\n            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n            return bindEvent === '*' || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n          }\n        } else {\n          return bind.type.toLocaleLowerCase() === typeLower;\n        }\n      }).map(bind => {\n        if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n          const postgresChanges = handledPayload.data;\n          const {\n            schema,\n            table,\n            commit_timestamp,\n            type,\n            errors\n          } = postgresChanges;\n          const enrichedPayload = {\n            schema: schema,\n            table: table,\n            commit_timestamp: commit_timestamp,\n            eventType: type,\n            new: {},\n            old: {},\n            errors: errors\n          };\n          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n        }\n        bind.callback(handledPayload, ref);\n      });\n    }\n  }\n  /** @internal */\n  _isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n  /** @internal */\n  _isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n  /** @internal */\n  _isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n  /** @internal */\n  _isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n  /** @internal */\n  _replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n  /** @internal */\n  _on(type, filter, callback) {\n    const typeLower = type.toLocaleLowerCase();\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback\n    };\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding);\n    } else {\n      this.bindings[typeLower] = [binding];\n    }\n    return this;\n  }\n  /** @internal */\n  _off(type, filter) {\n    const typeLower = type.toLocaleLowerCase();\n    this.bindings[typeLower] = this.bindings[typeLower].filter(bind => {\n      var _a;\n      return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n    });\n    return this;\n  }\n  /** @internal */\n  static isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /** @internal */\n  _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n    if (this.socket.isConnected()) {\n      this._rejoin();\n    }\n  }\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  _onClose(callback) {\n    this._on(CHANNEL_EVENTS.close, {}, callback);\n  }\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  _onError(callback) {\n    this._on(CHANNEL_EVENTS.error, {}, reason => callback(reason));\n  }\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  _canPush() {\n    return this.socket.isConnected() && this._isJoined();\n  }\n  /** @internal */\n  _rejoin(timeout = this.timeout) {\n    if (this._isLeaving()) {\n      return;\n    }\n    this.socket._leaveOpenTopic(this.topic);\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n  /** @internal */\n  _getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n    return records;\n  }\n}\nexport { RealtimeChannel as default };","map":{"version":3,"names":["CHANNEL_EVENTS","CHANNEL_STATES","Push","Timer","RealtimePresence","Transformers","httpEndpointURL","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","REALTIME_CHANNEL_STATES","RealtimeChannel","constructor","topic","params","config","socket","bindings","state","closed","joinedOnce","pushBuffer","subTopic","replace","Object","assign","broadcast","ack","self","presence","key","private","timeout","joinPush","join","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","receive","joined","reset","forEach","pushEvent","send","_onClose","log","_joinRef","_remove","_onError","reason","_isLeaving","_isClosed","errored","scheduleTimeout","_isJoining","_on","reply","payload","ref","_trigger","_replyEventName","broadcastEndpointURL","endPoint","subscribe","callback","_a","_b","isConnected","connect","isPrivate","e","accessTokenPayload","postgres_changes","map","r","filter","accessToken","access_token","updateJoinPayload","_rejoin","serverPostgresFilters","setAuth","undefined","clientPostgresBindings","bindingsLen","length","newPostgresBindings","i","clientPostgresBinding","event","schema","table","serverPostgresFilter","push","id","unsubscribe","Error","error","JSON","stringify","values","presenceState","track","opts","_this","_asyncToGenerator","type","untrack","_this2","on","args","_this3","_canPush","endpoint_payload","options","method","headers","Authorization","apikey","apiKey","body","messages","response","_fetchWithTimeout","cancel","ok","name","Promise","resolve","_c","_push","updatePayload","leaving","onClose","close","destroy","leavePush","leave","trigger","url","_this4","controller","AbortController","setTimeout","abort","fetch","signal","clearTimeout","startTimeout","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","events","indexOf","handledPayload","includes","bind","_d","_e","_f","bindId","bindEvent","ids","data","postgresChanges","commit_timestamp","errors","enrichedPayload","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","_off","isEqual","obj1","obj2","keys","k","_leaveOpenTopic","resend","records","convertChangeData","columns","record","old_record","default"],"sources":["C:/Users/Nereida Ramos/Downloads/tercera_entrega_front/node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nimport { httpEndpointURL } from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n    REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n    REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n    /**\n     * listen to Postgres changes.\n     */\n    REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n    REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n    REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n    REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n    REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES;\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nexport default class RealtimeChannel {\n    constructor(\n    /** Topic name can be any string. */\n    topic, params = { config: {} }, socket) {\n        this.topic = topic;\n        this.params = params;\n        this.socket = socket;\n        this.bindings = {};\n        this.state = CHANNEL_STATES.closed;\n        this.joinedOnce = false;\n        this.pushBuffer = [];\n        this.subTopic = topic.replace(/^realtime:/i, '');\n        this.params.config = Object.assign({\n            broadcast: { ack: false, self: false },\n            presence: { key: '' },\n            private: false,\n        }, params.config);\n        this.timeout = this.socket.timeout;\n        this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n        this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n        this.joinPush.receive('ok', () => {\n            this.state = CHANNEL_STATES.joined;\n            this.rejoinTimer.reset();\n            this.pushBuffer.forEach((pushEvent) => pushEvent.send());\n            this.pushBuffer = [];\n        });\n        this._onClose(() => {\n            this.rejoinTimer.reset();\n            this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n            this.state = CHANNEL_STATES.closed;\n            this.socket._remove(this);\n        });\n        this._onError((reason) => {\n            if (this._isLeaving() || this._isClosed()) {\n                return;\n            }\n            this.socket.log('channel', `error ${this.topic}`, reason);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this.joinPush.receive('timeout', () => {\n            if (!this._isJoining()) {\n                return;\n            }\n            this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n            this._trigger(this._replyEventName(ref), payload);\n        });\n        this.presence = new RealtimePresence(this);\n        this.broadcastEndpointURL =\n            httpEndpointURL(this.socket.endPoint) + '/api/broadcast';\n    }\n    /** Subscribe registers your client with the server */\n    subscribe(callback, timeout = this.timeout) {\n        var _a, _b;\n        if (!this.socket.isConnected()) {\n            this.socket.connect();\n        }\n        if (this.joinedOnce) {\n            throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n        }\n        else {\n            const { config: { broadcast, presence, private: isPrivate }, } = this.params;\n            this._onError((e) => callback && callback('CHANNEL_ERROR', e));\n            this._onClose(() => callback && callback('CLOSED'));\n            const accessTokenPayload = {};\n            const config = {\n                broadcast,\n                presence,\n                postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [],\n                private: isPrivate,\n            };\n            if (this.socket.accessToken) {\n                accessTokenPayload.access_token = this.socket.accessToken;\n            }\n            this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));\n            this.joinedOnce = true;\n            this._rejoin(timeout);\n            this.joinPush\n                .receive('ok', ({ postgres_changes: serverPostgresFilters, }) => {\n                var _a;\n                this.socket.accessToken &&\n                    this.socket.setAuth(this.socket.accessToken);\n                if (serverPostgresFilters === undefined) {\n                    callback && callback('SUBSCRIBED');\n                    return;\n                }\n                else {\n                    const clientPostgresBindings = this.bindings.postgres_changes;\n                    const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n                    const newPostgresBindings = [];\n                    for (let i = 0; i < bindingsLen; i++) {\n                        const clientPostgresBinding = clientPostgresBindings[i];\n                        const { filter: { event, schema, table, filter }, } = clientPostgresBinding;\n                        const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n                        if (serverPostgresFilter &&\n                            serverPostgresFilter.event === event &&\n                            serverPostgresFilter.schema === schema &&\n                            serverPostgresFilter.table === table &&\n                            serverPostgresFilter.filter === filter) {\n                            newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));\n                        }\n                        else {\n                            this.unsubscribe();\n                            callback &&\n                                callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n                            return;\n                        }\n                    }\n                    this.bindings.postgres_changes = newPostgresBindings;\n                    callback && callback('SUBSCRIBED');\n                    return;\n                }\n            })\n                .receive('error', (error) => {\n                callback &&\n                    callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n                return;\n            })\n                .receive('timeout', () => {\n                callback && callback('TIMED_OUT');\n                return;\n            });\n        }\n        return this;\n    }\n    presenceState() {\n        return this.presence.state;\n    }\n    async track(payload, opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'track',\n            payload,\n        }, opts.timeout || this.timeout);\n    }\n    async untrack(opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'untrack',\n        }, opts);\n    }\n    on(type, filter, callback) {\n        return this._on(type, filter, callback);\n    }\n    /**\n     * Sends a message into the channel.\n     *\n     * @param args Arguments to send to channel\n     * @param args.type The type of event to send\n     * @param args.event The name of the event being sent\n     * @param args.payload Payload to be sent\n     * @param opts Options to be used during the send process\n     */\n    async send(args, opts = {}) {\n        var _a, _b;\n        if (!this._canPush() && args.type === 'broadcast') {\n            const { event, payload: endpoint_payload } = args;\n            const options = {\n                method: 'POST',\n                headers: {\n                    Authorization: this.socket.accessToken\n                        ? `Bearer ${this.socket.accessToken}`\n                        : '',\n                    apikey: this.socket.apiKey ? this.socket.apiKey : '',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    messages: [\n                        { topic: this.subTopic, event, payload: endpoint_payload },\n                    ],\n                }),\n            };\n            try {\n                const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);\n                await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());\n                return response.ok ? 'ok' : 'error';\n            }\n            catch (error) {\n                if (error.name === 'AbortError') {\n                    return 'timed out';\n                }\n                else {\n                    return 'error';\n                }\n            }\n        }\n        else {\n            return new Promise((resolve) => {\n                var _a, _b, _c;\n                const push = this._push(args.type, args, opts.timeout || this.timeout);\n                if (args.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n                    resolve('ok');\n                }\n                push.receive('ok', () => resolve('ok'));\n                push.receive('error', () => resolve('error'));\n                push.receive('timeout', () => resolve('timed out'));\n            });\n        }\n    }\n    updateJoinPayload(payload) {\n        this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n    unsubscribe(timeout = this.timeout) {\n        this.state = CHANNEL_STATES.leaving;\n        const onClose = () => {\n            this.socket.log('channel', `leave ${this.topic}`);\n            this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n        };\n        this.rejoinTimer.reset();\n        // Destroy joinPush to avoid connection timeouts during unscription phase\n        this.joinPush.destroy();\n        return new Promise((resolve) => {\n            const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n            leavePush\n                .receive('ok', () => {\n                onClose();\n                resolve('ok');\n            })\n                .receive('timeout', () => {\n                onClose();\n                resolve('timed out');\n            })\n                .receive('error', () => {\n                resolve('error');\n            });\n            leavePush.send();\n            if (!this._canPush()) {\n                leavePush.trigger('ok', {});\n            }\n        });\n    }\n    /** @internal */\n    async _fetchWithTimeout(url, options, timeout) {\n        const controller = new AbortController();\n        const id = setTimeout(() => controller.abort(), timeout);\n        const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));\n        clearTimeout(id);\n        return response;\n    }\n    /** @internal */\n    _push(event, payload, timeout = this.timeout) {\n        if (!this.joinedOnce) {\n            throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n        }\n        let pushEvent = new Push(this, event, payload, timeout);\n        if (this._canPush()) {\n            pushEvent.send();\n        }\n        else {\n            pushEvent.startTimeout();\n            this.pushBuffer.push(pushEvent);\n        }\n        return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n    _onMessage(_event, payload, _ref) {\n        return payload;\n    }\n    /** @internal */\n    _isMember(topic) {\n        return this.topic === topic;\n    }\n    /** @internal */\n    _joinRef() {\n        return this.joinPush.ref;\n    }\n    /** @internal */\n    _trigger(type, payload, ref) {\n        var _a, _b;\n        const typeLower = type.toLocaleLowerCase();\n        const { close, error, leave, join } = CHANNEL_EVENTS;\n        const events = [close, error, leave, join];\n        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n            return;\n        }\n        let handledPayload = this._onMessage(typeLower, payload, ref);\n        if (payload && !handledPayload) {\n            throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n        }\n        if (['insert', 'update', 'delete'].includes(typeLower)) {\n            (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {\n                var _a, _b, _c;\n                return (((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' ||\n                    ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower);\n            }).map((bind) => bind.callback(handledPayload, ref));\n        }\n        else {\n            (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {\n                var _a, _b, _c, _d, _e, _f;\n                if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n                    if ('id' in bind) {\n                        const bindId = bind.id;\n                        const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n                        return (bindId &&\n                            ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) &&\n                            (bindEvent === '*' ||\n                                (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) ===\n                                    ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase())));\n                    }\n                    else {\n                        const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n                        return (bindEvent === '*' ||\n                            bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase()));\n                    }\n                }\n                else {\n                    return bind.type.toLocaleLowerCase() === typeLower;\n                }\n            }).map((bind) => {\n                if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n                    const postgresChanges = handledPayload.data;\n                    const { schema, table, commit_timestamp, type, errors } = postgresChanges;\n                    const enrichedPayload = {\n                        schema: schema,\n                        table: table,\n                        commit_timestamp: commit_timestamp,\n                        eventType: type,\n                        new: {},\n                        old: {},\n                        errors: errors,\n                    };\n                    handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n                }\n                bind.callback(handledPayload, ref);\n            });\n        }\n    }\n    /** @internal */\n    _isClosed() {\n        return this.state === CHANNEL_STATES.closed;\n    }\n    /** @internal */\n    _isJoined() {\n        return this.state === CHANNEL_STATES.joined;\n    }\n    /** @internal */\n    _isJoining() {\n        return this.state === CHANNEL_STATES.joining;\n    }\n    /** @internal */\n    _isLeaving() {\n        return this.state === CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n    _replyEventName(ref) {\n        return `chan_reply_${ref}`;\n    }\n    /** @internal */\n    _on(type, filter, callback) {\n        const typeLower = type.toLocaleLowerCase();\n        const binding = {\n            type: typeLower,\n            filter: filter,\n            callback: callback,\n        };\n        if (this.bindings[typeLower]) {\n            this.bindings[typeLower].push(binding);\n        }\n        else {\n            this.bindings[typeLower] = [binding];\n        }\n        return this;\n    }\n    /** @internal */\n    _off(type, filter) {\n        const typeLower = type.toLocaleLowerCase();\n        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n            var _a;\n            return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower &&\n                RealtimeChannel.isEqual(bind.filter, filter));\n        });\n        return this;\n    }\n    /** @internal */\n    static isEqual(obj1, obj2) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const k in obj1) {\n            if (obj1[k] !== obj2[k]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** @internal */\n    _rejoinUntilConnected() {\n        this.rejoinTimer.scheduleTimeout();\n        if (this.socket.isConnected()) {\n            this._rejoin();\n        }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n    _onClose(callback) {\n        this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n    _onError(callback) {\n        this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n    _canPush() {\n        return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n    _rejoin(timeout = this.timeout) {\n        if (this._isLeaving()) {\n            return;\n        }\n        this.socket._leaveOpenTopic(this.topic);\n        this.state = CHANNEL_STATES.joining;\n        this.joinPush.resend(timeout);\n    }\n    /** @internal */\n    _getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}