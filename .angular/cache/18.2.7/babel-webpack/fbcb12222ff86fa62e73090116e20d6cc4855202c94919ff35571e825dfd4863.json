{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BookingService = /*#__PURE__*/(() => {\n  class BookingService {\n    http;\n    baseUrl = 'http://localhost:3000/api/bookings';\n    constructor(http) {\n      this.http = http;\n    }\n    getAuthHeaders() {\n      const token = localStorage.getItem('token'); // Obtener el token del localStorage\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n    }\n    realizarReserva(bookingData) {\n      // Agregar la propiedad created_at antes de enviar la solicitud\n      const bookingWithCreatedAt = {\n        ...bookingData,\n        created_at: new Date().toISOString()\n      };\n      // Enviar el objeto con created_at\n      return this.http.post(`${this.baseUrl}/realizar-reserva`, bookingWithCreatedAt, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    cancelarReserva(bookingId) {\n      const token = localStorage.getItem('token');\n      return this.http.post(`${this.baseUrl}/cancelar-reserva`, {\n        \"booking_id\": bookingId\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n    obtenerReservasBuyer(userId) {\n      const token = localStorage.getItem('token');\n      return this.http.post(`${this.baseUrl}/todas-las-reserva-buyer`, {\n        user_id: userId\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n    obtenerReservasOwner(userId) {\n      return this.http.get(`${this.baseUrl}/todas-las-reserva-owner`, {\n        params: {\n          userId\n        },\n        headers: this.getAuthHeaders()\n      });\n    }\n    obtenerEstadoReserva(bookingId) {\n      return this.http.get(`${this.baseUrl}/estado-reserva`, {\n        params: {\n          bookingId\n        },\n        headers: this.getAuthHeaders()\n      });\n    }\n    obtenerMensajesReservaDueno(userId) {\n      return this.http.get(`${this.baseUrl}/mensaje-reserva-dueno`, {\n        params: {\n          userId\n        },\n        headers: this.getAuthHeaders()\n      });\n    }\n    cambiarEstadoReservaOwner(userId, bookingIds) {\n      return this.http.post(`${this.baseUrl}/estado-reserva`, {\n        userId,\n        bookingIds\n      }, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    static ɵfac = function BookingService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BookingService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BookingService,\n      factory: BookingService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return BookingService;\n})();","map":{"version":3,"names":["HttpHeaders","BookingService","http","baseUrl","constructor","getAuthHeaders","token","localStorage","getItem","realizarReserva","bookingData","bookingWithCreatedAt","created_at","Date","toISOString","post","headers","cancelarReserva","bookingId","obtenerReservasBuyer","userId","user_id","obtenerReservasOwner","get","params","obtenerEstadoReserva","obtenerMensajesReservaDueno","cambiarEstadoReservaOwner","bookingIds","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Nereida Ramos\\Downloads\\tercera_entrega_front\\src\\app\\services\\supabase\\booking.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Booking } from '../../auth/pages/interfaces/booking.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookingService {\r\n\r\n  private baseUrl = 'http://localhost:3000/api/bookings'; \r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = localStorage.getItem('token');  // Obtener el token del localStorage\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`  \r\n    });\r\n  }\r\n\r\n  realizarReserva(bookingData: Booking): Observable<any> {\r\n    // Agregar la propiedad created_at antes de enviar la solicitud\r\n    const bookingWithCreatedAt = {\r\n      ...bookingData,\r\n      created_at: new Date().toISOString()  \r\n    };\r\n\r\n    // Enviar el objeto con created_at\r\n    return this.http.post(`${this.baseUrl}/realizar-reserva`, bookingWithCreatedAt, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  cancelarReserva(bookingId: number): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    return this.http.post(`${this.baseUrl}/cancelar-reserva`, { \"booking_id\":bookingId },{headers: {'Authorization': `Bearer ${token}`}});\r\n  }\r\n\r\n  obtenerReservasBuyer(userId: number): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n\r\n    return this.http.post(`${this.baseUrl}/todas-las-reserva-buyer`, { \r\n      user_id:  userId ,\r\n    },{headers: {'Authorization': `Bearer ${token}`}});\r\n  }\r\n\r\n  obtenerReservasOwner(userId: string): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/todas-las-reserva-owner`, { \r\n      params: { userId },\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  obtenerEstadoReserva(bookingId: string): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/estado-reserva`, { \r\n      params: { bookingId },\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  obtenerMensajesReservaDueno(userId: string): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/mensaje-reserva-dueno`, { \r\n      params: { userId },\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  cambiarEstadoReservaOwner(userId: string, bookingIds: string[]): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/estado-reserva`, { userId, bookingIds }, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAQ9D,WAAaC,cAAc;EAArB,MAAOA,cAAc;IAILC,IAAA;IAFZC,OAAO,GAAG,oCAAoC;IAEtDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAE/BG,cAAcA,CAAA;MACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAE;MAC9C,OAAO,IAAIR,WAAW,CAAC;QACrB,eAAe,EAAE,UAAUM,KAAK;OACjC,CAAC;IACJ;IAEAG,eAAeA,CAACC,WAAoB;MAClC;MACA,MAAMC,oBAAoB,GAAG;QAC3B,GAAGD,WAAW;QACdE,UAAU,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OACnC;MAED;MACA,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACZ,OAAO,mBAAmB,EAAEQ,oBAAoB,EAAE;QAC9EK,OAAO,EAAE,IAAI,CAACX,cAAc;OAC7B,CAAC;IACJ;IAEAY,eAAeA,CAACC,SAAiB;MAC/B,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAO,IAAI,CAACN,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACZ,OAAO,mBAAmB,EAAE;QAAE,YAAY,EAACe;MAAS,CAAE,EAAC;QAACF,OAAO,EAAE;UAAC,eAAe,EAAE,UAAUV,KAAK;QAAE;MAAC,CAAC,CAAC;IACvI;IAEAa,oBAAoBA,CAACC,MAAc;MACjC,MAAMd,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,OAAO,IAAI,CAACN,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACZ,OAAO,0BAA0B,EAAE;QAC/DkB,OAAO,EAAGD;OACX,EAAC;QAACJ,OAAO,EAAE;UAAC,eAAe,EAAE,UAAUV,KAAK;QAAE;MAAC,CAAC,CAAC;IACpD;IAEAgB,oBAAoBA,CAACF,MAAc;MACjC,OAAO,IAAI,CAAClB,IAAI,CAACqB,GAAG,CAAC,GAAG,IAAI,CAACpB,OAAO,0BAA0B,EAAE;QAC9DqB,MAAM,EAAE;UAAEJ;QAAM,CAAE;QAClBJ,OAAO,EAAE,IAAI,CAACX,cAAc;OAC7B,CAAC;IACJ;IAEAoB,oBAAoBA,CAACP,SAAiB;MACpC,OAAO,IAAI,CAAChB,IAAI,CAACqB,GAAG,CAAC,GAAG,IAAI,CAACpB,OAAO,iBAAiB,EAAE;QACrDqB,MAAM,EAAE;UAAEN;QAAS,CAAE;QACrBF,OAAO,EAAE,IAAI,CAACX,cAAc;OAC7B,CAAC;IACJ;IAEAqB,2BAA2BA,CAACN,MAAc;MACxC,OAAO,IAAI,CAAClB,IAAI,CAACqB,GAAG,CAAC,GAAG,IAAI,CAACpB,OAAO,wBAAwB,EAAE;QAC5DqB,MAAM,EAAE;UAAEJ;QAAM,CAAE;QAClBJ,OAAO,EAAE,IAAI,CAACX,cAAc;OAC7B,CAAC;IACJ;IAEAsB,yBAAyBA,CAACP,MAAc,EAAEQ,UAAoB;MAC5D,OAAO,IAAI,CAAC1B,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACZ,OAAO,iBAAiB,EAAE;QAAEiB,MAAM;QAAEQ;MAAU,CAAE,EAAE;QAC9EZ,OAAO,EAAE,IAAI,CAACX,cAAc;OAC7B,CAAC;IACJ;;uCAhEWJ,cAAc,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAd/B,cAAc;MAAAgC,OAAA,EAAdhC,cAAc,CAAAiC,IAAA;MAAAC,UAAA,EAFb;IAAM;;SAEPlC,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}