{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PropertyService = /*#__PURE__*/(() => {\n  class PropertyService {\n    http;\n    apiUrl = 'http://localhost:3000/api/listings';\n    constructor(http) {\n      this.http = http;\n    }\n    // Obtener todas las propiedades de un propietario específico\n    getPropertiesByOwner() {\n      const token = localStorage.getItem('token');\n      const user = JSON.parse(localStorage.getItem('user'));\n      return this.http.post(`${this.apiUrl}/obtener-propiedaded-owner`, {\n        userid: user.id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    // Obtener todas las propiedades que existen filtradas\n    getPropertiesBybuyerFiltered({\n      city,\n      country,\n      price_per_nig,\n      num_bedrooms,\n      num_bathrooms,\n      max_guests,\n      searchtermn\n    }) {\n      const token = localStorage.getItem('token');\n      return this.http.post(`${this.apiUrl}/obtener-propiedaded-filtradas`, {\n        city,\n        country,\n        price_per_nig,\n        num_bedrooms,\n        num_bathrooms,\n        max_guests,\n        searchtermn\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    // Agregar una nueva propiedad\n    addProperty(property) {\n      return this.http.post(`${this.apiUrl}/agregar-propiedad`, property);\n    }\n    // Editar una propiedad existente\n    editProperty(user_id, listing_id, title, max_guests, num_bathrooms, num_bedrooms, price_per_nig, latitude, longitude, address, description, country, city) {\n      const token = localStorage.getItem('token');\n      return this.http.post(`${this.apiUrl}/update-propiedad`, {\n        userid: user_id,\n        listing_id: listing_id,\n        title: title,\n        city: city,\n        country: country,\n        description: description,\n        address: address,\n        latitude: latitude,\n        longitude: longitude,\n        price_per_nig: price_per_nig,\n        num_bedrooms: num_bedrooms,\n        num_bathrooms: num_bathrooms,\n        max_guests: max_guests\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    // Eliminar una propiedad\n    deleteProperty(listing_id) {\n      const token = localStorage.getItem('token');\n      const user = JSON.parse(localStorage.getItem('user'));\n      return this.http.post(`${this.apiUrl}/eliminar-propiedad`, {\n        userid: user.id,\n        listing_id: listing_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    // Obtener una propiedad por su ID\n    getPropertyById(propertyId) {\n      return this.http.get(`${this.apiUrl}/obtener-propiedad-buyer/${propertyId}`);\n    }\n    // Filtrar propiedades\n    getAllProperties() {\n      const token = localStorage.getItem('token');\n      return this.http.get(`${this.apiUrl}/obtener-propiedaded-buyer`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    static ɵfac = function PropertyService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PropertyService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PropertyService,\n      factory: PropertyService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PropertyService;\n})();","map":{"version":3,"names":["PropertyService","http","apiUrl","constructor","getPropertiesByOwner","token","localStorage","getItem","user","JSON","parse","post","userid","id","headers","Authorization","getPropertiesBybuyerFiltered","city","country","price_per_nig","num_bedrooms","num_bathrooms","max_guests","searchtermn","addProperty","property","editProperty","user_id","listing_id","title","latitude","longitude","address","description","deleteProperty","getPropertyById","propertyId","get","getAllProperties","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Nereida Ramos\\Downloads\\tercera_entrega_front\\src\\app\\services\\supabase\\property.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface Property {\r\n  id?: string;\r\n  title?: string;\r\n  description?: string;\r\n  ownerUserName?: string;\r\n  pricePerNight?: number;\r\n  location?: string;\r\n  images?: string[];\r\n  createdAt?: Date;\r\n  address?: string;\r\n  city?: string;\r\n  country?: string;\r\n  able?: false;\r\n  latitude?: number;\r\n  longitude?: number;\r\n  price_per_nig?: number;\r\n  num_bedrooms?: number;\r\n  num_bathrooms?: number;\r\n  max_guests?: number;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  deleted_at?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PropertyService {\r\n  private apiUrl = 'http://localhost:3000/api/listings';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Obtener todas las propiedades de un propietario específico\r\n  getPropertiesByOwner(): Observable<Property[]> {\r\n    const token = localStorage.getItem('token');\r\n    const user = JSON.parse(localStorage.getItem('user')!);\r\n    return this.http.post<Property[]>(\r\n      `${this.apiUrl}/obtener-propiedaded-owner`,\r\n      { userid: user.id },\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n  }\r\n  // Obtener todas las propiedades que existen filtradas\r\n  getPropertiesBybuyerFiltered({\r\n    city,\r\n    country,\r\n    price_per_nig,\r\n    num_bedrooms,\r\n    num_bathrooms,\r\n    max_guests,\r\n    searchtermn,\r\n  }: {\r\n    city?: string;\r\n    country?: string;\r\n    price_per_nig?: string;\r\n    num_bedrooms?: string;\r\n    num_bathrooms?: string;\r\n    max_guests?: string;\r\n    searchtermn?: string;\r\n  }): Observable<Property[]> {\r\n    const token = localStorage.getItem('token');\r\n    return this.http.post<Property[]>(\r\n      `${this.apiUrl}/obtener-propiedaded-filtradas`,\r\n\r\n      {\r\n        city,\r\n        country,\r\n        price_per_nig,\r\n        num_bedrooms,\r\n        num_bathrooms,\r\n        max_guests,\r\n        searchtermn,\r\n      },\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n  }\r\n\r\n  // Agregar una nueva propiedad\r\n  addProperty(property: Property): Observable<Property> {\r\n    return this.http.post<Property>(\r\n      `${this.apiUrl}/agregar-propiedad`,\r\n      property\r\n    );\r\n  }\r\n\r\n  // Editar una propiedad existente\r\n  editProperty(\r\n    user_id: number,\r\n    listing_id: number,\r\n    title?: string,\r\n    max_guests?: string,\r\n    num_bathrooms?: string,\r\n    num_bedrooms?: string,\r\n    price_per_nig?: string,\r\n    latitude?: string,\r\n    longitude?: string,\r\n    address?: string,\r\n    description?: string,\r\n    country?: string,\r\n    city?: string\r\n  ): Observable<void> {\r\n    const token = localStorage.getItem('token');\r\n    return this.http.post<void>(\r\n      `${this.apiUrl}/update-propiedad`,\r\n      {\r\n        userid: user_id,\r\n        listing_id: listing_id,\r\n        title: title,\r\n        city: city,\r\n        country: country,\r\n        description: description,\r\n        address: address,\r\n        latitude: latitude,\r\n        longitude: longitude,\r\n        price_per_nig: price_per_nig,\r\n        num_bedrooms: num_bedrooms,\r\n        num_bathrooms: num_bathrooms,\r\n        max_guests: max_guests,\r\n      },\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n  }\r\n\r\n  // Eliminar una propiedad\r\n  deleteProperty( listing_id: number): Observable<void> {\r\n    const token = localStorage.getItem('token');\r\n    const user = JSON.parse(localStorage.getItem('user')!);\r\n    return this.http.post<void>(\r\n      `${this.apiUrl}/eliminar-propiedad`,\r\n      {\r\n        userid: user.id,\r\n        listing_id: listing_id,\r\n      },\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n  }\r\n\r\n  // Obtener una propiedad por su ID\r\n  getPropertyById(propertyId: string): Observable<Property> {\r\n    return this.http.get<Property>(\r\n      `${this.apiUrl}/obtener-propiedad-buyer/${propertyId}`\r\n    );\r\n  }\r\n\r\n  // Filtrar propiedades\r\n  getAllProperties(): Observable<Property[]> {\r\n    const token = localStorage.getItem('token');\r\n    return this.http.get<Property[]>(\r\n      `${this.apiUrl}/obtener-propiedaded-buyer`,\r\n      { headers: { Authorization: `Bearer ${token}` } }\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}