{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    http;\n    baseUrl = environment.apiUrl;\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Método para iniciar sesión\n     * @param userData\n     * @returns\n     */\n    login(userData) {\n      const loginUrl = `${this.baseUrl}/user/login`; // Endpoint correcto para el login\n      return this.http.post(loginUrl, userData); // Solicitud POST con los datos en el cuerpo\n    }\n    /**\n     * Método para registrar un nuevo usuario\n     * @param userData\n     * @returns\n     */\n    register(userData) {\n      const registerUrl = `${this.baseUrl}/user/register-${userData.is_owner ? 'owner' : 'buyer'}`;\n      return this.http.post(registerUrl, userData);\n    }\n    static ɵfac = function UserService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":{"version":3,"names":["environment","UserService","http","baseUrl","apiUrl","constructor","login","userData","loginUrl","post","register","registerUrl","is_owner","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Nereida Ramos\\Downloads\\tercera_entrega_front\\src\\app\\auth\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment'; \r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private baseUrl: string = environment.apiUrl;  \r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Método para iniciar sesión\r\n   * @param userData \r\n   * @returns \r\n   */\r\n  login(userData: { email: string; password: string, username: string, is_owner: boolean }): Observable<any> {\r\n    const loginUrl = `${this.baseUrl}/user/login`;  // Endpoint correcto para el login\r\n    return this.http.post<any>(loginUrl, userData); // Solicitud POST con los datos en el cuerpo\r\n  }\r\n\r\n  /**\r\n   * Método para registrar un nuevo usuario\r\n   * @param userData \r\n   * @returns \r\n   */\r\n  register(userData: { email: string; username: string; password: string; is_owner: boolean }): Observable<any> {\r\n    const registerUrl = `${this.baseUrl}/user/register-${userData.is_owner ? 'owner' : 'buyer'}`;\r\n    return this.http.post<any>(registerUrl, userData);  \r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,WAAW,QAAQ,mCAAmC;;;AAK/D,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAGFC,IAAA;IAFZC,OAAO,GAAWH,WAAW,CAACI,MAAM;IAE5CC,YAAoBH,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvC;;;;;IAKAI,KAAKA,CAACC,QAAkF;MACtF,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACL,OAAO,aAAa,CAAC,CAAE;MAChD,OAAO,IAAI,CAACD,IAAI,CAACO,IAAI,CAAMD,QAAQ,EAAED,QAAQ,CAAC,CAAC,CAAC;IAClD;IAEA;;;;;IAKAG,QAAQA,CAACH,QAAkF;MACzF,MAAMI,WAAW,GAAG,GAAG,IAAI,CAACR,OAAO,kBAAkBI,QAAQ,CAACK,QAAQ,GAAG,OAAO,GAAG,OAAO,EAAE;MAC5F,OAAO,IAAI,CAACV,IAAI,CAACO,IAAI,CAAME,WAAW,EAAEJ,QAAQ,CAAC;IACnD;;uCAvBWN,WAAW,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAXf,WAAW;MAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEPlB,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}