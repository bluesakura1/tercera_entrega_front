{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Nereida Ramos/Downloads/tercera_entrega_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_HEADERS, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => {};\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nclass RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    var _this = this;\n    var _a;\n    this.accessToken = null;\n    this.apiKey = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.httpEndpoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    /**\n     * Use either custom fetch, if provided, or default fetch to make HTTP requests\n     *\n     * @internal\n     */\n    this._resolveFetch = customFetch => {\n      let _fetch;\n      if (customFetch) {\n        _fetch = customFetch;\n      } else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({\n          default: fetch\n        }) => fetch(...args));\n      } else {\n        _fetch = fetch;\n      }\n      return (...args) => _fetch(...args);\n    };\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    this.httpEndpoint = httpEndpointURL(endPoint);\n    if (options === null || options === void 0 ? void 0 : options.transport) {\n      this.transport = options.transport;\n    } else {\n      this.transport = null;\n    }\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n    if (accessToken) {\n      this.accessToken = accessToken;\n      this.apiKey = accessToken;\n    }\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer( /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.disconnect();\n      _this.connect();\n    }), this.reconnectAfterMs);\n    this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect() {\n    if (this.conn) {\n      return;\n    }\n    if (this.transport) {\n      this.conn = new this.transport(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n      return;\n    }\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new WebSocket(this._endPointURL());\n      this.setupConnection();\n      return;\n    }\n    this.conn = new WSWebSocketDummy(this._endPointURL(), undefined, {\n      close: () => {\n        this.conn = null;\n      }\n    });\n    import('ws').then(({\n      default: WS\n    }) => {\n      this.conn = new WS(this._endPointURL(), undefined, {\n        headers: this.headers\n      });\n      this.setupConnection();\n    });\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n  /**\n   * Returns all created channels\n   */\n  getChannels() {\n    return this.channels;\n  }\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  removeChannel(channel) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const status = yield channel.unsubscribe();\n      if (_this2.channels.length === 0) {\n        _this2.disconnect();\n      }\n      return status;\n    })();\n  }\n  /**\n   * Unsubscribes and removes all channels\n   */\n  removeAllChannels() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const values_1 = yield Promise.all(_this3.channels.map(channel => channel.unsubscribe()));\n      _this3.disconnect();\n      return values_1;\n    })();\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n  channel(topic, params = {\n    config: {}\n  }) {\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n    const callback = () => {\n      this.encode(data, result => {\n        var _a;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef() {\n    let newRef = this.ref + 1;\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n    return this.ref.toString();\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c._joinRef() !== channel._joinRef());\n  }\n  /**\n   * Sets up connection handlers.\n   *\n   * @internal\n   */\n  setupConnection() {\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  _endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /** @internal */\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n  _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`);\n    this._flushSendBuffer();\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n    this._triggerChanError();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n  _onConnError(error) {\n    this.log('transport', error.message);\n    this._triggerChanError();\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  /** @internal */\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /** @internal */\n  _sendHeartbeat() {\n    var _a;\n    if (!this.isConnected()) {\n      return;\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n}\nexport { RealtimeClient as default };\nclass WSWebSocketDummy {\n  constructor(address, _protocols, options) {\n    this.binaryType = 'arraybuffer';\n    this.onclose = () => {};\n    this.onerror = () => {};\n    this.onmessage = () => {};\n    this.onopen = () => {};\n    this.readyState = SOCKET_STATES.connecting;\n    this.send = () => {};\n    this.url = null;\n    this.url = address;\n    this.close = options.close;\n  }\n}","map":{"version":3,"names":["CHANNEL_EVENTS","CONNECTION_STATE","DEFAULT_HEADERS","DEFAULT_TIMEOUT","SOCKET_STATES","TRANSPORTS","VSN","WS_CLOSE_NORMAL","Serializer","Timer","httpEndpointURL","RealtimeChannel","noop","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","RealtimeClient","constructor","endPoint","options","_this","_a","accessToken","apiKey","channels","httpEndpoint","headers","params","timeout","heartbeatIntervalMs","heartbeatTimer","undefined","pendingHeartbeatRef","ref","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","close","error","message","_resolveFetch","customFetch","_fetch","fetch","args","then","default","websocket","transport","Object","assign","apikey","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","bind","reconnectTimer","_asyncToGenerator","disconnect","connect","_endPointURL","setupConnection","WSWebSocketDummy","WS","code","reason","onclose","clearInterval","reset","getChannels","removeChannel","channel","_this2","status","unsubscribe","length","removeAllChannels","_this3","values_1","Promise","all","map","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","event","result","send","setAuth","token","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","_makeRef","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnMessage","_onConnClose","_appendParams","vsn","rawMessage","type","_isMember","_trigger","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","address","_protocols"],"sources":["C:/Users/Nereida Ramos/Downloads/tercera_entrega_front/node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js"],"sourcesContent":["import { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_HEADERS, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL, } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => { };\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nexport default class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     */\n    constructor(endPoint, options) {\n        var _a;\n        this.accessToken = null;\n        this.apiKey = null;\n        this.channels = [];\n        this.endPoint = '';\n        this.httpEndpoint = '';\n        this.headers = DEFAULT_HEADERS;\n        this.params = {};\n        this.timeout = DEFAULT_TIMEOUT;\n        this.heartbeatIntervalMs = 30000;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.ref = 0;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new Serializer();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        /**\n         * Use either custom fetch, if provided, or default fetch to make HTTP requests\n         *\n         * @internal\n         */\n        this._resolveFetch = (customFetch) => {\n            let _fetch;\n            if (customFetch) {\n                _fetch = customFetch;\n            }\n            else if (typeof fetch === 'undefined') {\n                _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n            }\n            else {\n                _fetch = fetch;\n            }\n            return (...args) => _fetch(...args);\n        };\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n        this.httpEndpoint = httpEndpointURL(endPoint);\n        if (options === null || options === void 0 ? void 0 : options.transport) {\n            this.transport = options.transport;\n        }\n        else {\n            this.transport = null;\n        }\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.headers)\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n        if (options === null || options === void 0 ? void 0 : options.timeout)\n            this.timeout = options.timeout;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n        const accessToken = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n        if (accessToken) {\n            this.accessToken = accessToken;\n            this.apiKey = accessToken;\n        }\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs)\n            ? options.reconnectAfterMs\n            : (tries) => {\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n            };\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode)\n            ? options.encode\n            : (payload, callback) => {\n                return callback(JSON.stringify(payload));\n            };\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode)\n            ? options.decode\n            : this.serializer.decode.bind(this.serializer);\n        this.reconnectTimer = new Timer(async () => {\n            this.disconnect();\n            this.connect();\n        }, this.reconnectAfterMs);\n        this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n        if (this.conn) {\n            return;\n        }\n        if (this.transport) {\n            this.conn = new this.transport(this._endPointURL(), undefined, {\n                headers: this.headers,\n            });\n            return;\n        }\n        if (NATIVE_WEBSOCKET_AVAILABLE) {\n            this.conn = new WebSocket(this._endPointURL());\n            this.setupConnection();\n            return;\n        }\n        this.conn = new WSWebSocketDummy(this._endPointURL(), undefined, {\n            close: () => {\n                this.conn = null;\n            },\n        });\n        import('ws').then(({ default: WS }) => {\n            this.conn = new WS(this._endPointURL(), undefined, {\n                headers: this.headers,\n            });\n            this.setupConnection();\n        });\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        if (this.conn) {\n            this.conn.onclose = function () { }; // noop\n            if (code) {\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n            }\n            else {\n                this.conn.close();\n            }\n            this.conn = null;\n            // remove open handles\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.reconnectTimer.reset();\n        }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n        return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n        const status = await channel.unsubscribe();\n        if (this.channels.length === 0) {\n            this.disconnect();\n        }\n        return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n        const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));\n        this.disconnect();\n        return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return CONNECTION_STATE.Connecting;\n            case SOCKET_STATES.open:\n                return CONNECTION_STATE.Open;\n            case SOCKET_STATES.closing:\n                return CONNECTION_STATE.Closing;\n            default:\n                return CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === CONNECTION_STATE.Open;\n    }\n    channel(topic, params = { config: {} }) {\n        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n        const { topic, event, payload, ref } = data;\n        const callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * @param token A JWT string.\n     */\n    setAuth(token) {\n        this.accessToken = token;\n        this.channels.forEach((channel) => {\n            token && channel.updateJoinPayload({ access_token: token });\n            if (channel.joinedOnce && channel._isJoined()) {\n                channel._push(CHANNEL_EVENTS.access_token, { access_token: token });\n            }\n        });\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\n            dupChannel.unsubscribe();\n        }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n        this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());\n    }\n    /**\n     * Sets up connection handlers.\n     *\n     * @internal\n     */\n    setupConnection() {\n        if (this.conn) {\n            this.conn.binaryType = 'arraybuffer';\n            this.conn.onopen = () => this._onConnOpen();\n            this.conn.onerror = (error) => this._onConnError(error);\n            this.conn.onmessage = (event) => this._onConnMessage(event);\n            this.conn.onclose = (event) => this._onConnClose(event);\n        }\n    }\n    /**\n     * Returns the URL of the websocket.\n     *\n     * @internal\n     */\n    _endPointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            let { topic, event, payload, ref } = msg;\n            if ((ref && ref === this.pendingHeartbeatRef) ||\n                event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n                this.pendingHeartbeatRef = null;\n            }\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\n            this.channels\n                .filter((channel) => channel._isMember(topic))\n                .forEach((channel) => channel._trigger(event, payload, ref));\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\n        });\n    }\n    /** @internal */\n    _onConnOpen() {\n        this.log('transport', `connected to ${this._endPointURL()}`);\n        this._flushSendBuffer();\n        this.reconnectTimer.reset();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\n    }\n    /** @internal */\n    _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\n    }\n    /** @internal */\n    _onConnError(error) {\n        this.log('transport', error.message);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\n    }\n    /** @internal */\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    /** @internal */\n    _flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    /** @internal */\n    _sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            return;\n        }\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n        }\n        this.pendingHeartbeatRef = this._makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n        this.setAuth(this.accessToken);\n    }\n}\nclass WSWebSocketDummy {\n    constructor(address, _protocols, options) {\n        this.binaryType = 'arraybuffer';\n        this.onclose = () => { };\n        this.onerror = () => { };\n        this.onmessage = () => { };\n        this.onopen = () => { };\n        this.readyState = SOCKET_STATES.connecting;\n        this.send = () => { };\n        this.url = null;\n        this.url = address;\n        this.close = options.close;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}