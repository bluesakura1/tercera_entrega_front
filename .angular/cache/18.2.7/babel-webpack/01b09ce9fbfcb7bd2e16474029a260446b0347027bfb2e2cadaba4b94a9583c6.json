{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    http;\n    apiUrl = 'http://localhost:3000/api/User'; // URL base para el backend\n    constructor(http) {\n      this.http = http;\n    }\n    // Registro de usuario\n    register(role, user) {\n      // Mapeamos el rol para que coincida con el backend\n      const backendRole = role === 'admin' ? 'owner' : 'buyer'; // Asumimos que 'admin' tiene rol de propietario, si no es así, será comprador\n      const registerUrl = backendRole === 'buyer' ? `${this.apiUrl}/register-buyer` : `${this.apiUrl}/register-owner`;\n      return this.http.post(registerUrl, {\n        ...user,\n        role: backendRole\n      }).pipe(\n      // Enviamos el rol mapeado\n      map(response => {\n        if (response.success) {\n          return {\n            success: true\n          };\n        } else {\n          return {\n            success: false,\n            message: response.message || 'Error al registrar usuario'\n          };\n        }\n      }));\n    }\n    // Inicio de sesión\n    login(userName, password) {\n      const body = {\n        username: userName,\n        password\n      };\n      return this.http.post(`${this.apiUrl}/login`, body).pipe(\n      // Endpoint para login\n      map(response => {\n        if (response.success) {\n          // Guarda el token y el usuario en sessionStorage\n          sessionStorage.setItem('token', response.token);\n          sessionStorage.setItem('currentUser', userName.toLowerCase().trim());\n          sessionStorage.setItem('currentUserRole', response.role);\n          return {\n            success: true,\n            role: response.role\n          };\n        } else {\n          return {\n            success: false,\n            message: response.message || 'Usuario o contraseña incorrectos'\n          };\n        }\n      }));\n    }\n    // Obtener perfil de usuario\n    getProfile(userName) {\n      const token = sessionStorage.getItem('token');\n      const headers = {\n        'Authorization': `Bearer ${token}`\n      };\n      return this.http.get(`${this.apiUrl}/profile/${userName}`, {\n        headers\n      }).pipe(map(response => {\n        if (response.success) {\n          return response.user;\n        } else {\n          return null;\n        }\n      }));\n    }\n    // Actualizar perfil de usuario\n    updateProfile(userName, updatedData) {\n      const token = sessionStorage.getItem('token');\n      const headers = {\n        'Authorization': `Bearer ${token}`\n      };\n      return this.http.put(`${this.apiUrl}/update-profile/${userName}`, updatedData, {\n        headers\n      }).pipe(map(response => {\n        if (response.success) {\n          return {\n            success: true,\n            message: 'Perfil actualizado correctamente'\n          };\n        } else {\n          return {\n            success: false,\n            message: response.message || 'Error al actualizar perfil'\n          };\n        }\n      }));\n    }\n    // Cerrar sesión\n    logout() {\n      sessionStorage.removeItem('currentUser');\n      sessionStorage.removeItem('currentUserRole');\n      sessionStorage.removeItem('token');\n    }\n    static ɵfac = function UserService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":{"version":3,"names":["map","UserService","http","apiUrl","constructor","register","role","user","backendRole","registerUrl","post","pipe","response","success","message","login","userName","password","body","username","sessionStorage","setItem","token","toLowerCase","trim","getProfile","getItem","headers","get","updateProfile","updatedData","put","logout","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Nereida Ramos\\Downloads\\tercera_entrega_front\\src\\app\\services\\supabase\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, map } from 'rxjs';\r\nimport { LoginResponse, RegistroResponse } from '../../features/pages/login-response.interface';\r\nimport { User } from '../../features/pages/user.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  private apiUrl = 'http://localhost:3000/api/User'; // URL base para el backend\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Registro de usuario\r\n  register(role:string,user: { userName: string; password: string; email: string; fullName: string }): Observable<RegistroResponse> {\r\n    // Mapeamos el rol para que coincida con el backend\r\n    const backendRole = role === 'admin' ? 'owner' : 'buyer';  // Asumimos que 'admin' tiene rol de propietario, si no es así, será comprador\r\n\r\n    const registerUrl = backendRole === 'buyer' \r\n      ? `${this.apiUrl}/register-buyer` \r\n      : `${this.apiUrl}/register-owner`;\r\n\r\n    return this.http.post<any>(registerUrl, { ...user, role: backendRole }).pipe(  // Enviamos el rol mapeado\r\n      map(response => {\r\n        if (response.success) {\r\n          return { success: true };\r\n        } else {\r\n          return {\r\n            success: false,\r\n            message: response.message || 'Error al registrar usuario'\r\n          };\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Inicio de sesión\r\n  login(userName: string, password: string): Observable<LoginResponse> {\r\n    const body = { username: userName, password };\r\n\r\n    return this.http.post<any>(`${this.apiUrl}/login`, body).pipe(  // Endpoint para login\r\n      map(response => {\r\n        if (response.success) {\r\n          // Guarda el token y el usuario en sessionStorage\r\n          sessionStorage.setItem('token', response.token);\r\n          sessionStorage.setItem('currentUser', userName.toLowerCase().trim());\r\n          sessionStorage.setItem('currentUserRole', response.role);\r\n\r\n          return {\r\n            success: true,\r\n            role: response.role\r\n          };\r\n        } else {\r\n          return {\r\n            success: false,\r\n            message: response.message || 'Usuario o contraseña incorrectos'\r\n          };\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Obtener perfil de usuario\r\n  getProfile(userName: string): Observable<User | null> {\r\n    const token = sessionStorage.getItem('token');\r\n    const headers = { 'Authorization': `Bearer ${token}` };\r\n\r\n    return this.http.get<any>(`${this.apiUrl}/profile/${userName}`, { headers }).pipe(\r\n      map(response => {\r\n        if (response.success) {\r\n          return response.user as User;\r\n        } else {\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Actualizar perfil de usuario\r\n  updateProfile(userName: string, updatedData: Partial<User>): Observable<{ success: boolean; message: string }> {\r\n    const token = sessionStorage.getItem('token');\r\n    const headers = { 'Authorization': `Bearer ${token}` };\r\n\r\n    return this.http.put<any>(`${this.apiUrl}/update-profile/${userName}`, updatedData, { headers }).pipe(\r\n      map(response => {\r\n        if (response.success) {\r\n          return {\r\n            success: true,\r\n            message: 'Perfil actualizado correctamente'\r\n          };\r\n        } else {\r\n          return {\r\n            success: false,\r\n            message: response.message || 'Error al actualizar perfil'\r\n          };\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Cerrar sesión\r\n  logout(): void {\r\n    sessionStorage.removeItem('currentUser');\r\n    sessionStorage.removeItem('currentUserRole');\r\n    sessionStorage.removeItem('token');\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}