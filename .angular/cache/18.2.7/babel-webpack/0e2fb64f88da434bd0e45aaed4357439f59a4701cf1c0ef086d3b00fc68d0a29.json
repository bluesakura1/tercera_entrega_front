{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    http;\n    apiUrl = 'http://localhost:3000/api/messages';\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Enviar un mensaje.\n     * @param message Dabtos del mensaje.\n     * @returns Observable con la respuesta del servidor.\n     */\n    sendMessage(message) {\n      const token = localStorage.getItem('token');\n      return this.http.post(`${this.apiUrl}/enviar-mensajes`, message, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n    /**\n     * Obtener el historial de mensajes entre dos usuarios.\n     * @param senderId ID del usuario emisor.\n     * @param receiverId ID del usuario receptor.\n     * @returns Observable con la lista de mensajes.\n     */\n    getMessageHistory(receiverId) {\n      const token = localStorage.getItem('token');\n      return this.http.post(`${this.apiUrl}/historial-de-mensajes`, {\n        'receiver_user_id': receiverId\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n    /**\n     * Obtener mensajes recibidos por un usuario específico.\n     * @param receiverId ID del usuario receptor.\n     * @returns Observable con la lista de mensajes.\n     */\n    getMessagesByUser(receiverId) {\n      const token = localStorage.getItem('token');\n      const params = new HttpParams().set('receiver_user_id', receiverId.toString());\n      return this.http.post(`${this.apiUrl}/recibir-mensajes`, {\n        params\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n    /**\n     * Obtener el número de mensajes no leídos de un usuario.\n     * @param receiverId ID del usuario receptor.\n     * @returns Observable con el número de mensajes no leídos.\n     */\n    getUnreadMessages(receiverId) {\n      const token = localStorage.getItem('token');\n      const params = new HttpParams().set('receiver_user_id', receiverId.toString());\n      return this.http.post(`${this.apiUrl}/notificaciones-mensajes-recibidos`, {\n        params\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n    static ɵfac = function MessageService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MessageService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MessageService,\n      factory: MessageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MessageService;\n})();","map":{"version":3,"names":["HttpParams","MessageService","http","apiUrl","constructor","sendMessage","message","token","localStorage","getItem","post","headers","getMessageHistory","receiverId","getMessagesByUser","params","set","toString","getUnreadMessages","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Nereida Ramos\\Downloads\\tercera_entrega_front\\src\\app\\services\\supabase\\message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface Message {\r\n  Isread: boolean;\r\ncreated_at: string;\r\ndeleted_at: string;\r\nlistingListingId: null;\r\nmessage: string;\r\nmessage_id: number;\r\nreceiverUserUserId: number;\r\nsenderUserUserId: number;\r\nupdated_at: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  private apiUrl = 'http://localhost:3000/api/messages';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Enviar un mensaje.\r\n   * @param message Dabtos del mensaje.\r\n   * @returns Observable con la respuesta del servidor.\r\n   */\r\n  sendMessage(message: Message): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    return this.http.post(`${this.apiUrl}/enviar-mensajes`, message, {headers: {'Authorization': `Bearer ${token}`}});\r\n  }\r\n\r\n  /**\r\n   * Obtener el historial de mensajes entre dos usuarios.\r\n   * @param senderId ID del usuario emisor.\r\n   * @param receiverId ID del usuario receptor.\r\n   * @returns Observable con la lista de mensajes.\r\n   */\r\n  getMessageHistory(receiverId: number): Observable<Message[]> {\r\n    const token = localStorage.getItem('token');\r\n    return this.http.post<Message[]>(`${this.apiUrl}/historial-de-mensajes`, { 'receiver_user_id':receiverId }, {headers: {'Authorization': `Bearer ${token}`}});\r\n  }\r\n\r\n  /**\r\n   * Obtener mensajes recibidos por un usuario específico.\r\n   * @param receiverId ID del usuario receptor.\r\n   * @returns Observable con la lista de mensajes.\r\n   */\r\n  getMessagesByUser(receiverId: number): Observable<Message[]> {\r\n    const token = localStorage.getItem('token');\r\n    const params = new HttpParams().set('receiver_user_id', receiverId.toString());\r\n    return this.http.post<Message[]>(`${this.apiUrl}/recibir-mensajes`, { params }, {headers: {'Authorization': `Bearer ${token}`}});\r\n  }\r\n\r\n  /**\r\n   * Obtener el número de mensajes no leídos de un usuario.\r\n   * @param receiverId ID del usuario receptor.\r\n   * @returns Observable con el número de mensajes no leídos.\r\n   */\r\n  getUnreadMessages(receiverId: number): Observable<number> {\r\n    const token = localStorage.getItem('token');\r\n    const params = new HttpParams().set('receiver_user_id', receiverId.toString());\r\n    return this.http.post<number>(`${this.apiUrl}/notificaciones-mensajes-recibidos`, { params }, {headers: {'Authorization': `Bearer ${token}`}});\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAkB7D,WAAaC,cAAc;EAArB,MAAOA,cAAc;IAGLC,IAAA;IAFZC,MAAM,GAAG,oCAAoC;IAErDC,YAAoBF,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvC;;;;;IAKAG,WAAWA,CAACC,OAAgB;MAC1B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,kBAAkB,EAAEG,OAAO,EAAE;QAACK,OAAO,EAAE;UAAC,eAAe,EAAE,UAAUJ,KAAK;QAAE;MAAC,CAAC,CAAC;IACnH;IAEA;;;;;;IAMAK,iBAAiBA,CAACC,UAAkB;MAClC,MAAMN,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAY,GAAG,IAAI,CAACP,MAAM,wBAAwB,EAAE;QAAE,kBAAkB,EAACU;MAAU,CAAE,EAAE;QAACF,OAAO,EAAE;UAAC,eAAe,EAAE,UAAUJ,KAAK;QAAE;MAAC,CAAC,CAAC;IAC9J;IAEA;;;;;IAKAO,iBAAiBA,CAACD,UAAkB;MAClC,MAAMN,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMM,MAAM,GAAG,IAAIf,UAAU,EAAE,CAACgB,GAAG,CAAC,kBAAkB,EAAEH,UAAU,CAACI,QAAQ,EAAE,CAAC;MAC9E,OAAO,IAAI,CAACf,IAAI,CAACQ,IAAI,CAAY,GAAG,IAAI,CAACP,MAAM,mBAAmB,EAAE;QAAEY;MAAM,CAAE,EAAE;QAACJ,OAAO,EAAE;UAAC,eAAe,EAAE,UAAUJ,KAAK;QAAE;MAAC,CAAC,CAAC;IAClI;IAEA;;;;;IAKAW,iBAAiBA,CAACL,UAAkB;MAClC,MAAMN,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMM,MAAM,GAAG,IAAIf,UAAU,EAAE,CAACgB,GAAG,CAAC,kBAAkB,EAAEH,UAAU,CAACI,QAAQ,EAAE,CAAC;MAC9E,OAAO,IAAI,CAACf,IAAI,CAACQ,IAAI,CAAS,GAAG,IAAI,CAACP,MAAM,oCAAoC,EAAE;QAAEY;MAAM,CAAE,EAAE;QAACJ,OAAO,EAAE;UAAC,eAAe,EAAE,UAAUJ,KAAK;QAAE;MAAC,CAAC,CAAC;IAChJ;;uCA9CWN,cAAc,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAdrB,cAAc;MAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;MAAAC,UAAA,EAFb;IAAM;;SAEPxB,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}